<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>听雪者的博客</title>
    <link>https://cyberwave.github.io/</link>
    <description>Recent content on 听雪者的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 21 Apr 2021 11:33:56 +0800</lastBuildDate><atom:link href="https://cyberwave.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言的垃圾回收 第三部分 GC速度</title>
      <link>https://cyberwave.github.io/post/translate/garbage-collection-in-go-part-3-gc-pacing/</link>
      <pubDate>Wed, 21 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/garbage-collection-in-go-part-3-gc-pacing/</guid>
      <description>[原文] Garbage Collection In Go : Part III - GC Pacing 锲子 这是由三部分构成的系列中的第二篇，它将提供Go语言垃圾回收背后的语义和机制的理解。这篇文章重点介绍GC如何自</description>
    </item>
    
    <item>
      <title>Go语言的垃圾回收：第二部分 GC追踪</title>
      <link>https://cyberwave.github.io/post/translate/garbage-collection-in-go-part-2-gc-traces/</link>
      <pubDate>Wed, 21 Apr 2021 09:58:40 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/garbage-collection-in-go-part-2-gc-traces/</guid>
      <description>[原文] Garbage Collection In Go : Part II - GC Traces 锲子 这是由三部分构成的系列中的第二篇，它将提供Go语言垃圾回收背后的语义和机制的理解。这篇文章重点介绍如何生成G</description>
    </item>
    
    <item>
      <title>Go语言的垃圾回收：第一部分 语义</title>
      <link>https://cyberwave.github.io/post/translate/garbage-collection-in-go-part-1-semantics/</link>
      <pubDate>Tue, 20 Apr 2021 14:28:30 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/garbage-collection-in-go-part-1-semantics/</guid>
      <description>[原文] Garbage Collection In Go : Part I - Semantics 锲子 这是由三部分构成的系列中的第一篇，它将提供Go语言垃圾回收背后的语义和机制的理解。这篇文章重点介绍有关收集者语</description>
    </item>
    
    <item>
      <title>数据和语义的设计哲学</title>
      <link>https://cyberwave.github.io/post/translate/Language-mechanics-design-philosophy-data-and-semantics/</link>
      <pubDate>Tue, 20 Apr 2021 10:33:39 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/Language-mechanics-design-philosophy-data-and-semantics/</guid>
      <description>原文 Design Philosophy On Data And Semantics 楔子 这是一个由四部分组成的系列文章的终结篇，该系列文章将提供对Go中指针，栈，堆，逃逸分析和值/指针语法背后设计和机制的理解</description>
    </item>
    
    <item>
      <title>内存剖析的语言机制</title>
      <link>https://cyberwave.github.io/post/translate/Language-mechanics-on-memory-profiling/</link>
      <pubDate>Mon, 19 Apr 2021 17:06:13 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/Language-mechanics-on-memory-profiling/</guid>
      <description>楔子 这是一个由四部分组成的系列文章的第三篇，该系列文章将提供对Go中指针，栈，堆，逃逸分析和值/指针语法背后设计和机制的理解。这篇文章主要关</description>
    </item>
    
    <item>
      <title>逃逸分析的语言机制</title>
      <link>https://cyberwave.github.io/post/translate/Language-mechanics-on-escape-analysis/</link>
      <pubDate>Mon, 19 Apr 2021 15:13:56 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/Language-mechanics-on-escape-analysis/</guid>
      <description>楔子 这是一个由四部分组成的系列文章的第二篇，该系列文章将提供对Go中指针，栈，堆，逃逸分析和值/指针语法背后设计和机制的理解。这篇文章主要关</description>
    </item>
    
    <item>
      <title>栈和指针的语言机制</title>
      <link>https://cyberwave.github.io/post/translate/Language-mechanics-on-stacks-and-pointers/</link>
      <pubDate>Mon, 19 Apr 2021 09:49:05 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/translate/Language-mechanics-on-stacks-and-pointers/</guid>
      <description>楔子 这是一个由四部分组成的系列文章的第一篇，该系列文章将提供对Go中指针、堆栈、堆、转义分析和值/指针语义背后的机制和设计的理解。这篇文章主</description>
    </item>
    
    <item>
      <title>2fa 双因素认证的Go实现</title>
      <link>https://cyberwave.github.io/post/2fa-auth-of-go/</link>
      <pubDate>Wed, 03 Mar 2021 13:36:02 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/2fa-auth-of-go/</guid>
      <description>什么是2fa? 2fa，即 two-factor authentication，双因素认证。在登录网站及计算机系统时，使用两个不同的认证因素来证明自己。双因素认证依</description>
    </item>
    
    <item>
      <title>Go语言调度器的工作窃取</title>
      <link>https://cyberwave.github.io/post/Go-work-stealing-scheduler/</link>
      <pubDate>Mon, 01 Mar 2021 15:47:43 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/Go-work-stealing-scheduler/</guid>
      <description>[译] Go&amp;rsquo;s work-stealing scheduler Go调度器的工作是在一个或多个处理器上运行的多个工作者OS线程上分发可运行的goroutine。在多线程计算中，调度中出现了两种</description>
    </item>
    
    <item>
      <title>Go的调度：第三部分 - 并发</title>
      <link>https://cyberwave.github.io/post/Scheduling-In-Go-3-Concurrency/</link>
      <pubDate>Sun, 28 Feb 2021 17:38:44 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/Scheduling-In-Go-3-Concurrency/</guid>
      <description>[译] Scheduling In Go : Part III - Concurrency 序幕 这是分三部分的系列文章中的第三篇，它将提供对Go调度器背后的机制和语义的理解。这篇文章专注于并发。 三个部分系列的索</description>
    </item>
    
    <item>
      <title>Go的调度：第二部分 - Go调度器</title>
      <link>https://cyberwave.github.io/post/Scheduling-In-Go-2-GO-Scheduler/</link>
      <pubDate>Sat, 27 Feb 2021 14:15:42 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/Scheduling-In-Go-2-GO-Scheduler/</guid>
      <description>[译] Scheduling In Go : Part II - Go Scheduler 序幕 这是一个由三部分组成的系列文章中的第二篇，它将提供对Go调度器背后的机制和语义的理解。这篇文章重点介绍Go调度器</description>
    </item>
    
    <item>
      <title>Go返回指针的坏处</title>
      <link>https://cyberwave.github.io/post/bad-go-of-return-pointer/</link>
      <pubDate>Sat, 27 Feb 2021 10:42:47 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/bad-go-of-return-pointer/</guid>
      <description>[译] Bad Go: pointer returns 作为一个不再年轻的C程序员，我苦恼于一点：函数返回结构体的指针是完全正常的。但我感觉这是Go的坏处，通常我认为返回结构体的值会</description>
    </item>
    
    <item>
      <title>Go的调度：第一部分-OS调度</title>
      <link>https://cyberwave.github.io/post/Scheduling-In-Go-1-OS-Scheduler/</link>
      <pubDate>Wed, 24 Feb 2021 11:54:40 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/Scheduling-In-Go-1-OS-Scheduler/</guid>
      <description>[译] Scheduling In Go : Part I - OS Scheduler 序幕 这是一个由三部分组成的系列文章的第一篇。它将提供对 Go 调度器背后的机制和语义的理解。这篇文章着重于操作系统调度器。</description>
    </item>
    
    <item>
      <title>Grep Search for Strings</title>
      <link>https://cyberwave.github.io/post/grep-search-for-strings/</link>
      <pubDate>Thu, 04 Feb 2021 19:56:04 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/grep-search-for-strings/</guid>
      <description>[原文] How to use grep to search for strings in files on the shell 1 GREP 命令 - 概览 grep 命令，意思是 全局正则表达式输出(global regular expression print)，仍然是Linux终端环境中功</description>
    </item>
    
    <item>
      <title>Golang的可视化内存管理</title>
      <link>https://cyberwave.github.io/post/visualizing-memory-management-in-golang/</link>
      <pubDate>Thu, 04 Feb 2021 13:50:07 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/visualizing-memory-management-in-golang/</guid>
      <description>原文：🚀 Visualizing memory management in Golang 在本章中， 我们将研究 Go 编程语言（golang）的内存管理。Go 是一种静态类型化和编译的语言，和 C/C++ 和 Rust一样。因此，Go</description>
    </item>
    
    <item>
      <title>掌握k8s的47个高级教程</title>
      <link>https://cyberwave.github.io/post/47-advanced-tutorials-for-mastering-k8s/</link>
      <pubDate>Thu, 04 Feb 2021 13:50:07 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/47-advanced-tutorials-for-mastering-k8s/</guid>
      <description>[译] 47 advanced tutorials for mastering Kubernetes 如果开始学习 Kubernetes，并不难找到高质量的初学者教程。但是，当你掌握了基础，在哪儿可以找到更高级的学习资源？ 官方</description>
    </item>
    
    <item>
      <title>了解Docker容器内外的MySQL拒绝服务错误</title>
      <link>https://cyberwave.github.io/post/understanding-mysql-access-denied-error-inout-docker/</link>
      <pubDate>Thu, 04 Feb 2021 12:57:58 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/understanding-mysql-access-denied-error-inout-docker/</guid>
      <description>[译文] Understanding MySQL the Access Denied error in or outside a Docker container MySQL基于三个数据对用户身份认证：用户名，连接的另一端的IP地址或域名和提供的密码。它在 mysql.user 表搜索这三个值</description>
    </item>
    
    <item>
      <title>使用Json Ld构建有意义的数据API</title>
      <link>https://cyberwave.github.io/post/json-ld-building-meaningful-data-apis/</link>
      <pubDate>Thu, 04 Feb 2021 10:40:44 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/json-ld-building-meaningful-data-apis/</guid>
      <description>[原文] [译] https://rollout.io/blog/json-ld-building-meaningful-data-apis/ 每个人都喜欢 JSON 然而，JSON 本身是相当无意义的。好吧，它是有意义的，但这仅对这种格式的源创建者来说。它们可以通过文档、对话或</description>
    </item>
    
    <item>
      <title>使用Hugo和GitHub搭建博客</title>
      <link>https://cyberwave.github.io/post/use-hugo-and-github-make-blog/</link>
      <pubDate>Thu, 04 Feb 2021 09:26:38 +0800</pubDate>
      
      <guid>https://cyberwave.github.io/post/use-hugo-and-github-make-blog/</guid>
      <description>[转载] 使用Hugo和GitHub搭建博客 折腾了几天博客的框架终于搭建起来了。研究了一番之后，最终还是选择使用Hugo和GitHub来搭建博</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://cyberwave.github.io/about/</link>
      <pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate>
      
      <guid>https://cyberwave.github.io/about/</guid>
      <description>内容佚失，以待修补</description>
    </item>
    
    <item>
      <title>工具</title>
      <link>https://cyberwave.github.io/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cyberwave.github.io/tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://cyberwave.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cyberwave.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://cyberwave.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cyberwave.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
